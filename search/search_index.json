{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"In\u00edcio","text":""},{"location":"#sobre-o-projeto","title":"Sobre o projeto","text":"<p>Gastos DF \u00e9 um projeto em desenvolvimento na disciplina de M\u00e9todos de Desenvolvimento de Software. Nele, estamos focados em extrair informa\u00e7\u00f5es do Di\u00e1rio Oficial do Distrito Federal sobre os principais investimentos do governo, segmentando esses dados por munic\u00edpios e apresentando de maneira acess\u00edvel ao publico em um site de simples e f\u00e1cil navega\u00e7\u00e3o.</p>"},{"location":"#impacto-esperado","title":"Impacto Esperado","text":"<p>Gastos DF visa ser uma ferramenta essencial para promover a transpar\u00eancia e a responsabilidade no uso dos recursos p\u00fablicos no Distrito Federal. Ao tornar os dados de despesas governamentais mais acess\u00edveis e compreens\u00edveis, esperamos engajar a popula\u00e7\u00e3o e estimular uma maior participa\u00e7\u00e3o cidad\u00e3 no monitoramento das finan\u00e7as p\u00fablicas.</p>"},{"location":"#objetivos-do-projeto","title":"\ud83c\udfaf Objetivos do Projeto","text":"<ol> <li>Transpar\u00eancia: Facilitar o acesso aos dados p\u00fablicos sobre os maiores gastos do governo distrital, promovendo a transpar\u00eancia nas finan\u00e7as p\u00fablicas.</li> <li>Organiza\u00e7\u00e3o: Categoriza\u00e7\u00e3o dos gastos por tipo (dividido por secret\u00e1rias) para proporcionar uma vis\u00e3o detalhada e segmentada das despesas.</li> <li>Acessibilidade: Exibir os dados em uma plataforma amig\u00e1vel e intuitiva, acess\u00edvel a todos os cidad\u00e3os interessados em acompanhar a aplica\u00e7\u00e3o dos recursos p\u00fablicos.</li> </ol>"},{"location":"#metodologia","title":"\ud83d\udccb Metodologia","text":"<ul> <li>Extra\u00e7\u00e3o de Dados: Utiliza\u00e7\u00e3o de t\u00e9cnicas de web scraping e minera\u00e7\u00e3o de dados para extrair informa\u00e7\u00f5es relevantes do di\u00e1rio oficial do Distrito Federal.</li> <li>An\u00e1lise e Classifica\u00e7\u00e3o: Processamento e categoriza\u00e7\u00e3o dos dados extra\u00eddos para identificar e separar os maiores gastos por diferentes tipos, como sa\u00fade, educa\u00e7\u00e3o, infraestrutura, entre outros.</li> <li>Desenvolvimento Web: Cria\u00e7\u00e3o de um site interativo e responsivo onde os dados ser\u00e3o exibidos de forma gr\u00e1fica e textual, facilitando a compreens\u00e3o e a navega\u00e7\u00e3o.</li> </ul>"},{"location":"#front-end","title":"Front-End","text":"<p>O front-end construido para aprensentar as informa\u00e7\u00f5es e \u00e9 feito usando o <code>JavaScript</code>, <code>HTML</code> e <code>CSS</code>.</p>"},{"location":"#bases-web","title":"Bases web","text":"<p>A parte l\u00f3gica do projeto, feita para extrair os dados e pass\u00e1-los para a parte de exibi\u00e7\u00e3o do site, \u00e9 constru\u00edda em <code>Python</code>.</p>"},{"location":"#colaboradores","title":"\ud83e\udd1d Colaboradores","text":"<p> Victor C\u00e2mara Matheus Barros Daniel Nunes Vinicius Castelo Douglas Wilson <p></p>"},{"location":"arquitetura/","title":"Arquitetura","text":""},{"location":"arquitetura/#visao-geral-da-arquitetura","title":"Vis\u00e3o Geral da arquitetura","text":"<p>Neste sistema, foram usados dois ambientes: o ambiente do <code>front-end</code>, que \u00e9 onde foi constru\u00edda a parte visual do projeto, sendo representado pela pasta <code>web</code>, que armazena a web page do projeto, e o ambiente <code>Bases web</code>, com a pasta de mesmo nome que est\u00e1 dentro do ambiente do <code>front-end</code> e representa o ambiente de l\u00f3gica do nosso projeto, obtendo todos os dados que ser\u00e3o usados.</p> <p>A imagem abaixo ilustra a disposi\u00e7\u00e3o dos elementos do projeto. </p> <p></p>"},{"location":"arquitetura/#funcionamento","title":"Funcionamento","text":"<p>Os c\u00f3digos de raspagem de dados presentes em <code>Bases web</code> extraem as informa\u00e7\u00f5es necess\u00e1rias, tratam-nas e as salvam em v\u00e1rios arquivos JSON. Esses arquivos s\u00e3o utilizados pela web page para exibir as informa\u00e7\u00f5es de forma gr\u00e1fica. O algoritmo de licita\u00e7\u00f5es usa a API <code>dados abertos</code> do governo para obter os dados usados, enquanto os demais algoritmos utilizam a API do <code>querido di\u00e1rio</code>. A web page usa <code>JavaScript</code>, <code>HTML</code> e <code>CSS</code> em sua constru\u00e7\u00e3o, e <code>Bases web</code> usa <code>Python</code>.</p>"},{"location":"backend/","title":"Backend","text":""},{"location":"backend/#visao-geral","title":"Vis\u00e3o Geral","text":"<p>Este backend consiste em cinco algoritmos que interagem com a API \"Querido Di\u00e1rio\". Cada algoritmo \u00e9 respons\u00e1vel por realizar uma busca espec\u00edfica na API, filtrar os dados recebidos e armazen\u00e1-los em um arquivo JSON. Esses arquivos JSON s\u00e3o atualizados automaticamente por um workflow do GitHub, garantindo que os dados estejam sempre atualizados.</p>"},{"location":"backend/#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<p>O backend est\u00e1 organizado da seguinte forma, usando as APIs Querido Di\u00e1rio e Dados Abertos:</p> <ul> <li><code>compras_automatico.py</code>: Realiza a busca de compras hospitalares na API Querido Di\u00e1rio e salva os dados filtrados em <code>resultados_compras.json</code>.</li> <li><code>credito_automatico.py</code>: Realiza a busca creditos suplementares na API Querido Di\u00e1rio e salva os dados filtrados em <code>resultados_credito.json</code>.</li> <li><code>verbas_automatico.py</code>: Realiza a busca verbas parlamentares para escolas na API Querido Di\u00e1rio e salva os dados filtrados em <code>resultados_verbas.json</code>.</li> <li><code>convenio_automatico.py</code>: Realiza a busca convenios hospitalares na API Querido Di\u00e1rio e salva os dados filtrados em <code>resultados_convenio.json</code>.</li> <li><code>licitacoes_automatico.py</code>: Realiza a busca licita\u00e7oes na API Dados Abertos e salva os dados filtrados em <code>dados_licitacoes.json</code>.</li> </ul> <p>Cada algoritmo foi desenvolvido para atender a uma necessidade espec\u00edfica de filtragem e manipula\u00e7\u00e3o dos dados retornados pela API.</p>"},{"location":"backend/#configurando-a-api","title":"Configurando a API","text":""},{"location":"backend/#querido-diario","title":"Querido Di\u00e1rio","text":""},{"location":"backend/#usando-como-exemplo-o-algoritomo-verbas_automaticopy","title":"Usando como exemplo o algoritomo Verbas_automatico.py","text":"<p>A API do querido diario le os diarios oficiais no formato .txt&lt; desta forma \u00e9 pesquisado palavras chaves que tem rela\u00e7oes com o objeto de pesquisa, como neste exemplo \"N\u00ba CRE / UE Capital Custeio Total\"</p> <p>PDF do diario oficial:</p> <p></p> <p>.txt lida pela API:</p> <p></p> <p>Desta forma, primeiro \u00e9 nescessario ditar os par\u00e2metros na op\u00e7\u00e3o de gazetas: + ID do munic\u00edpio que deseja realizar a busca + Intervalo de tempo em que deseja buscar + String que deseja + o numero de caract\u00e9res que ir\u00e1 retornar + Numero maximo de resultados + Numero maximo de resultaods por gazeta retornada + Ordenar a Data</p> <p></p> <p>Ao executar a APi ela retornar\u00e1 o seguinte link</p> <pre><code>https://queridodiario.ok.org.br/api/gazettes?published_since=2024-01-01&amp;published_until=2024-08-01&amp;querystring=%22N%C2%BA%20CRE%20%2F%20UE%20Capital%20Custeio%20Total%22&amp;excerpt_size=500&amp;number_of_excerpts=1&amp;pre_tags=&amp;post_tags=&amp;size=10&amp;sort_by=relevance\n~~~~\n\nEste link retorna um ou varios Json de acordo com os par\u00e2metros buscados\nTemos:\n+ O total de gazetas\n+ Id do territorio\n+ Data\n+ Data em que foi processado\n+ URL do diario em PDF\n+ Nome do territorio\n+ Sigla do estado\n+ A string que foi buscada dentro de um excerpt\n+ verifica se o diario \u00e9 uma vers\u00e3o extra-oficial\n+ link para o diario oficial em txt\n\n~~~json\n{\n            \"territory_id\": \"5300108\",\n            \"date\": \"2021-01-04\",\n            \"scraped_at\": \"2021-12-16T18:13:08.483389\",\n            \"url\": \"https://querido-diario.nyc3.cdn.digitaloceanspaces.com/5300108/2021-01-04/92ee5a33891e358bdaee1237577f239a4359d183.pdf\",\n            \"territory_name\": \"Bras\u00edlia\",\n            \"state_code\": \"DF\",\n            \"excerpts\": [\n                \"execu\u00e7\u00e3o completa do recurso no\\nexerc\u00edcio referente ao primeiro pagamento, a sua utiliza\u00e7\u00e3o ficar\u00e1 condicionada a\\nautoriza\u00e7\u00e3o da SUPLAV.\\nArt. 8\u00ba Esta Portaria entra em vigor na data de sua publica\u00e7\u00e3o.\\n\\nF\u00c1BIO PEREIRA DE SOUSA\\n \\n\\nANEXO \u00daNICO\\nN\u00ba CRE / UE Capital Custeio Total\\n\\n1 CRE GAMA R$ 180.000,00 R$ 0,00 R$ 180.000,00\\n\\n2 CRE GUAR\u00c1 R$ 0,00 R$ 80.000,00 R$ 80.000,00\\n\\n TOTAL R$ 180.000,00 R$ 80.000,00 R$ 260.000,00\\n\\nSECRETARIA DE ESTADO\\nDE SEGURAN\u00c7A P\u00daBLICA\\n\\nPORTARIA N\u00ba 135, DE 21 DE DEZEMBRO DE 2020\\nO SECRET\u00c1RIO\"\n            ],\n            \"is_extra_edition\": false,\n            \"txt_url\": \"https://querido-diario.nyc3.cdn.digitaloceanspaces.com/5300108/2021-01-04/92ee5a33891e358bdaee1237577f239a4359d183.txt\"\n        }\n\n\n</code></pre> <p>O algoritimo automarico ir\u00e1 sempre buscar o diario oficial da data anterior</p> <pre><code>#pegar a data de ontem\nyesterday = datetime.now() - timedelta(days=1)\nyesterday_str = yesterday.strftime(\"%Y-%m-%d\")\n\n# Fazendo a solicita\u00e7\u00e3o GET para a API\nurl = f'https://queridodiario.ok.org.br/api/gazettes?territory_ids=5300108&amp;published_since={yesterday_str}&amp;published_until={yesterday_str}&amp;querystring=%22N%C2%BA%20UE%20Custeio%20Total%22%20%22N%C2%BA%20CRE%2FUE%20Capital%20Custeio%20Total%22&amp;excerpt_size=50000&amp;number_of_excerpts=100&amp;pre_tags=&amp;post_tags=&amp;size=10000&amp;sort_by=ascending_date'\nresponse = requests.get(url)\n</code></pre> <p>Ap\u00f3s receber o json, o excerpt \u00e9 tratado e \u00e9 extraido os valores e os nomes das entidades</p> <pre><code># Verificando se a solicita\u00e7\u00e3o foi bem-sucedida\nif response.status_code == 200:\n    # Convertendo a resposta para JSON\n    dados = response.json()\n\n    # Acessando a lista de gazettes dentro dos dados\n    gazettes = dados['gazettes']\n\n    # Iterando sobre cada gazette na lista\n    for gazette in gazettes:\n        # Acessando a data de cada gazette\n        data = gazette['date']\n        data_obj = datetime.strptime(data, \"%Y-%m-%d\")\n        data_formatada = data_obj.strftime(\"%d-%m-%Y\")\n\n        # Acessando a lista de excertos de cada gazette\n        excertos = gazette['excerpts']\n\n        # Iterando sobre cada excerto\n        for excerto in excertos:\n            # Fun\u00e7\u00e3o para processar os padr\u00f5es\n            def process_pattern(pattern, regex):\n                if pattern in excerto:\n                    linhas = excerto.strip().split('\\n')\n                    for linha in linhas[linhas.index(pattern) + 1:]:\n                        matches = re.findall(regex, linha)\n                        if matches:\n                            for match in matches:\n                                escola = match[0].strip()\n                                total = match[-1].strip()\n                                total_float = float(total.replace('.', '').replace(',', '.'))\n\n                                if escola not in escolas_dict:\n                                    escolas_dict[escola] = {\"escola\": escola, \"dados\": []}\n\n                                escolas_dict[escola][\"dados\"].append({\n                                    \"data\": data_formatada,\n                                    \"valor\": total_float\n                                })\n\n\n            # Processando os diferentes padr\u00f5es\n            process_pattern(\"N\u00ba CRE/UE Capital Custeio Total\",\n                            r'\\d+\\s+([\\w\\s]+?)\\s+R\\$\\s*([\\d,.]+)\\s+R\\$\\s*([\\d,.]+)\\s+R\\$\\s*([\\d,.]+)')\n            process_pattern(\"N\u00ba UE Custeio Total\", r'\\d+\\s+([\\w\\s]+?)\\s+R\\$\\s*([\\d,.]+)\\s+R\\$\\s*([\\d,.]+)')\n            process_pattern(\"N\u00ba CRE / UE Capital Custeio Total\",\n                            r'\\d+\\s+([\\w\\s]+?)\\s+R\\$\\s*([\\d,.]+)\\s+R\\$\\s*([\\d,.]+)\\s+R\\$\\s*([\\d,.]+)')\n</code></pre>"},{"location":"backend/#dados-abertos","title":"Dados Abertos","text":""},{"location":"backend/#e-usado-somente-em-automatico_licitacoespy","title":"\u00c9 usado somente em automatico_licitacoes.py","text":"<p>A API retorna um Json com os dados das licita\u00e7\u00f5es dentro do periodo de tempo imposto no request </p> <p>retorna jsons como:</p> <pre><code> {\n      \"id_compra\": \"string\",\n      \"identificador\": \"string\",\n      \"numero_processo\": \"string\",\n      \"uasg\": 0,\n      \"modalidade\": 0,\n      \"nome_modalidade\": \"string\",\n      \"numero_aviso\": 0,\n      \"situacao_aviso\": \"string\",\n      \"tipo_pregao\": \"string\",\n      \"tipo_recurso\": \"string\",\n      \"nome_responsavel\": \"string\",\n      \"funcao_responsavel\": \"string\",\n      \"numero_itens\": 0,\n      \"valor_estimado_total\": 0,\n      \"valor_homologado_total\": 0,\n      \"informacoes_gerais\": \"string\",\n      \"objeto\": \"string\",\n      \"endereco_entrega_edital\": \"string\",\n      \"codigo_municipio_uasg\": 0,\n      \"data_abertura_proposta\": \"2024-09-04\",\n      \"data_entrega_edital\": \"2024-09-04\",\n      \"data_entrega_proposta\": \"2024-09-04\",\n      \"data_publicacao\": \"2024-09-04\",\n      \"dt_alteracao\": \"2024-09-04T04:46:00.753Z\"\n    }\n</code></pre> <p>Desta forma os dados s\u00e3o colocados no JSON e tratados pelo javascript no frontend</p>"},{"location":"backend/#atualizacao-automatica-dos-arquivos-json","title":"Atualiza\u00e7\u00e3o Autom\u00e1tica dos Arquivos JSON","text":"<p>Um workflow do GitHub foi configurado para rodar automaticamente em um hor\u00e1rio determinado ou em intervalos espec\u00edficos. Este workflow executa os algoritmos e atualiza os arquivos JSON no reposit\u00f3rio, garantindo que os dados estejam sempre em sua vers\u00e3o mais recente.</p> <p>O workflow est\u00e1 definido no arquivo <code>.github/workflows/update_data.yml</code> e inclui as seguintes etapas:</p> <ol> <li>Checagem do Reposit\u00f3rio: Verifica se h\u00e1 mudan\u00e7as pendentes.</li> <li>Execu\u00e7\u00e3o dos Algoritmos: Executa todos os cinco algoritmos.</li> <li>Atualiza\u00e7\u00e3o dos Arquivos JSON: Salva os resultados em seus respectivos jsons</li> <li>Commit e Push: Faz o commit das mudan\u00e7as e envia para o reposit\u00f3rio.</li> </ol>"},{"location":"backlog/","title":"Backlog","text":"<p>Projeto: Gastos DF</p> <p>Objetivo: Criar um sistema web para gerenciamento e visualiza\u00e7\u00e3o de dados de gastos do Distrito Federal.</p> <p>Prioridade:</p> <ol> <li>Alta Prioridade:<ul> <li>F1: Uma p\u00e1gina web responsiva (EP 01)</li> <li>F2: Filtrar os dados (EP 02)</li> <li>F3: Organiza-los em gr\u00e1ficos (CP 02)</li> </ul> </li> <li>M\u00e9dia Prioridade:<ul> <li>F4: Fornecer os dados brutos para uso livre </li> </ul> </li> <li>Baixa Prioridade:<ul> <li>F5: Exportar os gr\u00e1ficos gerados para uso livre</li> <li>F6: Mostrar em um hist\u00f3rico pesquisas anteriores</li> </ul> </li> </ol> <p>Epics:</p> <p>EP 01: INTERFACE VISUAL DO SITE</p> <ul> <li>Descri\u00e7\u00e3o: Desenvolver a interface visual do site, garantindo que seja responsiva e intuitiva para os usu\u00e1rios.</li> <li>Crit\u00e9rios de Aceita\u00e7\u00e3o:<ul> <li>A interface visual deve ser responsiva.</li> <li>A navega\u00e7\u00e3o pelo site deve ser f\u00e1cil e intuitiva.</li> <li>A paleta de cores utilizada deve ser consistente com a identidade visual do projeto.</li> </ul> </li> </ul> <p>EP 02: LIDAR COM OS DADOS ENVOLVIDOS</p> <ul> <li>Descri\u00e7\u00e3o: Implementar as funcionalidades para lidar com os dados do projeto, incluindo filtragem e organiza\u00e7\u00e3o em gr\u00e1ficos.</li> <li>Crit\u00e9rios de Aceita\u00e7\u00e3o:<ul> <li>Os dados do projeto devem ser carregados e armazenados de forma segura e eficiente.</li> <li>Os usu\u00e1rios devem ter a op\u00e7\u00e3o de filtrar os dados por diferentes crit\u00e9rios.</li> <li>Os dados filtrados devem ser apresentados em gr\u00e1ficos claros e informativos.</li> </ul> </li> </ul> <p>Capacidades:</p> <p>CP 01: Conseguir mostrar os dados e informa\u00e7\u00f5es do projeto</p> <ul> <li>Funcionalidades:<ul> <li>Exibir os dados do projeto em uma tabela ou lista.</li> <li>Exibir detalhes de cada dado do projeto.</li> </ul> </li> </ul> <p>CP 02: Conseguir filtrar corretamente os dados</p> <ul> <li>Funcionalidades:<ul> <li>Implementar filtros por diferentes crit\u00e9rios (por exemplo, data, regi\u00e3o, tipo de dado).</li> <li>Exibir o n\u00famero de resultados encontrados para cada filtro.</li> </ul> </li> </ul> <p>Funcionalidades:</p> <p>F1: Uma p\u00e1gina web responsiva</p> <ul> <li>Epic: EP 01</li> <li>Capacidade: CP 01</li> <li>Prioridade: Alta</li> <li>Descri\u00e7\u00e3o: Criar uma p\u00e1gina web que seja responsiva e eficiente</li> </ul> <p>F2: Filtrar os dados</p> <ul> <li>Epic: EP 02</li> <li>Capacidade: CP 02</li> <li>Prioridade: Alta</li> <li>Descri\u00e7\u00e3o: Implementar funcionalidades de filtragem para que os usu\u00e1rios possam encontrar os dados espec\u00edficos que desejam visualizar.</li> </ul> <p>F3: Organiza-los em gr\u00e1ficos</p> <ul> <li>Epic: EP 02</li> <li>Capacidade: CP 02</li> <li>Prioridade: M\u00e9dia</li> <li>Descri\u00e7\u00e3o: Apresentar os dados filtrados em gr\u00e1ficos claros e informativos, permitindo que os usu\u00e1rios explorem as tend\u00eancias e rela\u00e7\u00f5es entre os dados.</li> </ul>"},{"location":"frontend/","title":"Front End","text":"<p>Nosso front end foi desenvolvido utilizando HTML, CSS e JavaScript. Ele recebe os dados raspados em json e os exibe em formato de gr\u00e1ficos.</p> <p>Est\u00e1 organizado da seguinte maneira: todos os JSONs usados est\u00e3o na pasta WEB, e todas as p\u00e1ginas HTML tamb\u00e9m est\u00e3o presentes na mesma pasta. H\u00e1 uma pasta imagens para separar as imagens usadas e uma pasta CSS para separar os scripts CSS utilizados. Al\u00e9m disso, h\u00e1 tamb\u00e9m a pasta Bases web, onde est\u00e1 a l\u00f3gica do projeto.</p>"},{"location":"frontend/#como-rodar-o-projeto","title":"Como rodar o Projeto","text":"<p>Para roda o Projeto localmente pela linha de comando, siga os passos abaixo:</p> <ol> <li>Abra o Terminal ou Prompt de Comando:</li> <li>No Windows, voc\u00ea pode usar o Prompt de Comando ou PowerShell.</li> <li> <p>No macOS ou Linux, use o Terminal.</p> </li> <li> <p>Navegue at\u00e9 o Diret\u00f3rio do Projeto:    Use o comando <code>cd</code> para mudar para o diret\u00f3rio onde os arquivos HTML est\u00e3o localizados. Por exemplo:    ```bash    cd /caminho/para/seu/projeto</p> </li> <li> <p>Inicie um Servidor Web Local: Voc\u00ea pode usar uma ferramenta como http-server para iniciar um servidor local. Se n\u00e3o tiver http-server instalado, voc\u00ea pode instal\u00e1-lo via npm (Node Package Manager). Primeiro, instale o Node.js e npm, se ainda n\u00e3o o fez, e depois execute:   <code>bash   npm install -g http-server</code>   Ap\u00f3s a instala\u00e7\u00e3o, inicie o servidor com:   <code>http-server</code> Acesse o Projeto no Navegador: Ap\u00f3s iniciar o servidor, voc\u00ea ver\u00e1 uma URL local no terminal, como http://127.0.0.1:8080. Abra essa URL no seu navegador para ver o Projeto em funcionamento.</p> </li> </ol> <p>Verifique os Resultados: Navegue pelas p\u00e1ginas e funcionalidades para garantir que tudo esteja funcionando conforme o esperado.</p>"},{"location":"sprints/sprint1/","title":"Sprint1","text":""},{"location":"sprints/sprint1/#planejamento-de-sprint-1","title":"Planejamento de Sprint 1","text":"<p>Resumo da Reuni\u00e3o n1</p> <ul> <li>Discuss\u00e3o sobre a API do Querido Di\u00e1rio:<ul> <li>Foi realizada uma discuss\u00e3o sobre a utiliza\u00e7\u00e3o da API do Querido Di\u00e1rio no projeto.</li> </ul> </li> <li>Treinamento sobre a API:<ul> <li>Foi realizado um treinamento detalhado sobre a API (Fast API).</li> </ul> </li> <li>Explica\u00e7\u00e3o sobre JavaScript:<ul> <li>Foi dada uma explica\u00e7\u00e3o sobre os conceitos b\u00e1sicos de JavaScript.</li> </ul> </li> <li>Bibliotecas no front-end:<ul> <li>Foi discutida a possibilidade de utilizar bibliotecas no front-end do projeto.</li> </ul> </li> </ul> <p>Issues para o Sprint 2:</p> <ul> <li>Cria\u00e7\u00e3o do Backlog:<ul> <li>Criar o backlog do projeto, detalhando as funcionalidades e tarefas a serem desenvolvidas.</li> </ul> </li> <li>Git page e esqueleto do front-end:<ul> <li>Levantar o Git page do projeto e criar um esqueleto do front-end.</li> </ul> </li> <li>Design Thinking:<ul> <li>Aplicar a metodologia Design Thinking para definir os requisitos do projeto.</li> </ul> </li> <li>Arquitetura do projeto:<ul> <li>Definir a arquitetura do projeto, incluindo as tecnologias a serem utilizadas.</li> </ul> </li> <li>CI/CD:<ul> <li>Estudar e implementar um sistema de CI/CD para automatizar o processo de desenvolvimento e deploy do projeto.</li> </ul> </li> <li>Docker:<ul> <li>Estudar e implementar o Docker para containerizar o projeto.</li> </ul> </li> <li>Tecnologia do front-end:<ul> <li>Avaliar e escolher a tecnologia de front-end mais adequada para o projeto (entre Angular, Bootstrap e React).</li> </ul> </li> </ul>"}]}